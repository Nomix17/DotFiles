// ==UserScript==
// @name        Fix witanime style
// @namespace   https://github.com/timmontague/youtube-disable-number-seek
// @description disables the 0-9 keyboard shortcuts
// @author      timm
// @version     1.0.2
// @match       *://witanime.red/*
// @run-at      document-end
// ==/UserScript==

(function() {
    'use strict';

    const CONFIG = {
        searchBarId: 'searchContent',
        showButtonId: 'showSearch',
        newShowButtonId: 'ShowSearch',
        retryAttempts: 50,
        retryDelay: 100
    };

    let newSearchBar = null;
    let showButton = null;

    function waitForElement(selector, isId = false) {
        return new Promise((resolve, reject) => {
            let attempts = 0;

            function check() {
                const element = isId ? document.getElementById(selector) : document.querySelector(selector);

                if (element) {
                    resolve(element);
                } else if (attempts >= CONFIG.retryAttempts) {
                    reject(new Error(`Element ${selector} not found after ${CONFIG.retryAttempts} attempts`));
                } else {
                    attempts++;
                    setTimeout(check, CONFIG.retryDelay);
                }
            }

            check();
        });
    }

    function createSearchBar() {
        const searchBar = document.createElement("div");
        searchBar.id = CONFIG.searchBarId;

        const inputElement = document.createElement("input");
        const searchButton = document.createElement("button");
        const closeButton = document.createElement("button");

        searchButton.id = "searchButton";
        closeButton.id = "closeButton";

        searchButton.textContent = "بحث";
        closeButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"
                 fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
        `;
        searchButton.style.fontSize = "15px";

        inputElement.placeholder = "ابحث عن أنمي";

        searchBar.append(searchButton, inputElement, closeButton);

        applySearchBarStyles(searchBar, inputElement, [searchButton, closeButton]);

        addEventListeners(inputElement, searchButton, closeButton, searchBar);

        return searchBar;
    }

    function applySearchBarStyles(searchBar, inputElement, buttons) {
        Object.assign(searchBar.style, {
            position: "fixed",
            top: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            width: "min(90%, 600px)",
            display: "none",
            alignItems: "center",
            gap: "10px",
            padding: "12px 20px",
            backgroundColor: "rgba(19, 23, 34, 0.95)",
            borderRadius: "12px",
            boxShadow: "0 8px 32px rgba(0, 0, 0, 0.3)",
            zIndex: "10000",
            border: "1px solid rgba(255, 255, 255, 0.1)",
            backdropFilter: "blur(10px)"
        });

        Object.assign(inputElement.style, {
            flex: "1",
            padding: "8px 12px",
            border: "1px solid rgba(255, 255, 255, 0.2)",
            borderRadius: "6px",
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            color: "white",
            fontSize: "14px",
            outline: "none",
            transition: "all 0.2s ease"
        });

        buttons.forEach(btn => {
            Object.assign(btn.style, {
                height: "38px",
                minWidth: "48px",
                backgroundColor: "#027e96",
                color: "white",
                fontWeight: "bold",
                border: "none",
                borderRadius: "6px",
                cursor: "pointer",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                transition: "all 0.2s ease"
            });
        });
    }

    function addEventListeners(inputElement, searchButton, closeButton, searchBar) {
        inputElement.addEventListener("focus", function() {
            this.style.border = "1px solid #027e96";
            this.style.boxShadow = "0 0 0 2px rgba(2, 126, 150, 0.2)";
        });

        inputElement.addEventListener("blur", function() {
            this.style.border = "1px solid rgba(255, 255, 255, 0.2)";
            this.style.boxShadow = "none";
        });

        const performSearch = () => {
            const query = inputElement.value.trim();
            if (query) {
                const searchUrl = `https://witanime.red/?search_param=animes&s=${query.replaceAll(" ","+")}`;
                window.location.href = searchUrl;
            }
        };

        inputElement.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                performSearch();
            }
        });

        searchButton.addEventListener("click", performSearch);

        closeButton.addEventListener("click", () => {
            toggleSearchBar(false);
        });

        [searchButton, closeButton].forEach(btn => {
            btn.addEventListener("mouseenter", () => {
                btn.style.backgroundColor = "#035a6b";
                btn.style.color = "black";

            });

            btn.addEventListener("mouseleave", () => {
                btn.style.backgroundColor = "#027e96";
                btn.style.color = "white";
            });
        });
    }

    function toggleSearchBar(show = null) {
        if (!newSearchBar) return;

        const isCurrentlyVisible = newSearchBar.style.display === "flex";
        const shouldShow = show !== null ? show : !isCurrentlyVisible;

        if (shouldShow) {
            newSearchBar.style.display = "flex";
            newSearchBar.style.visibility = "visible";
            newSearchBar.style.opacity = "1";
            setTimeout(() => {
                const input = newSearchBar.querySelector('input');
                if (input) input.focus();
            }, 100);
        } else {
            newSearchBar.style.display = "none";
            newSearchBar.style.visibility = "hidden";
            newSearchBar.style.opacity = "0";
        }
    }

    function setupShowButton() {
        if (!showButton) return;

        showButton.id = CONFIG.newShowButtonId;

        const newShowButton = showButton.cloneNode(true);
        showButton.parentNode.replaceChild(newShowButton, showButton);
        showButton = newShowButton;

        showButton.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            toggleSearchBar();
        });
    }

    function replaceOriginalSearchBar() {
        return waitForElement(CONFIG.searchBarId, true)
            .then(originalSearchBar => {
                const parent = originalSearchBar.parentElement;
                if (parent) {
                    parent.removeChild(originalSearchBar);
                }
            })
            .catch(error => {
            });
    }

    function setupHeader() {
        try {
            const menuContainer = document.createElement("div");
            const headerContainer = document.getElementsByClassName("header-navbar")[0];
            const logo = document.getElementsByClassName("col-md-3 col-sm-12")[0];

            if (!headerContainer || !logo) {
                return;
            }

            const oldContainers = document.querySelectorAll('ul.menu a');
            const menuItems = [
                { element: document.createElement("div"), text: "الرئيسية", href: "https://witanime.red/" },
                { element: document.createElement("div"), text: "قائمة الأنمي", href: "https://witanime.red/قائمة-الانمي/" },
                { element: document.createElement("div"), text: "أفلام الأنمي", href: "https://witanime.red/anime-type/movie/" },
                { element: document.createElement("div"), text: "أنميات الموسم", href: "https://witanime.red/anime-season/%D8%B5%D9%8A%D9%81-2025/" },
                { element: document.createElement("div"), text: "مواعيد الحلقات", href: "https://witanime.red/%d9%85%d9%88%d8%a7%d8%b9%d9%8a%d8%af-%d8%a7%d9%84%d8%ad%d9%84%d9%82%d8%a7%d8%aa/" }
            ];

            headerContainer.innerHTML = "";
            Object.assign(headerContainer.style, {
                display: "flex",
                flexDirection: "row",
                justifyContent: "space-between",
                margin: "0 30px 0px 150px",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0)"
            });

            Object.assign(menuContainer.style, {
                display: "flex",
                flexDirection: "row",
                height: "60px",
                margin: "0",
                padding: "0",
                justifyContent: "center",
                alignItems: "center"
            });

            if (logo.parentNode) {
                logo.parentNode.removeChild(logo);
            }
            logo.style.width = "100px";
            logo.style.margin = "0";
            headerContainer.appendChild(logo);

            menuItems.forEach((item, index) => {
                const { element, text, href } = item;
                element.innerHTML = text;

                Object.assign(element.style, {
                    backgroundColor: "rgba(0,0,0,0)",
                    margin: "0px",
                    height: "100%",
                    color: "white",
                    fontSize: "15px",
                    fontWeight: "bold",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    minWidth: "150px",
                    borderRadius: "10px",
                    cursor: "pointer",
                    transition: "background-color 0.2s ease"
                });

                element.addEventListener("mouseover", () => {
                    element.style.backgroundColor = "rgba(255,255,255,0.2)";
                });

                element.addEventListener("mouseleave", () => {
                    element.style.backgroundColor = "rgba(255,255,255,0)";
                });

                element.addEventListener("click", () => {
                    window.location.href = href;
                });

                menuContainer.appendChild(element);
            });

            headerContainer.appendChild(menuContainer);

            if (showButton && showButton.parentNode) {
                showButton.parentNode.removeChild(showButton);
                headerContainer.appendChild(showButton);
            }

        } catch (error) {
        }
    }

    function addKeyboardShortcuts() {
        document.addEventListener("keydown", (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                toggleSearchBar();
            }

            if (e.key === 'Escape' && newSearchBar && newSearchBar.style.display === 'flex') {
                toggleSearchBar(false);
            }
        });
    }

    async function init() {
        try {
            showButton = await waitForElement(CONFIG.showButtonId, true);

            newSearchBar = createSearchBar();
            document.body.appendChild(newSearchBar);

            setupShowButton();

            await replaceOriginalSearchBar();

            setupHeader();

            addKeyboardShortcuts();

        } catch (error) {
        }
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
window.addEventListener('load', async() => {
  await loadIframe(document.getElementsByClassName("server-link")[0]);
});

